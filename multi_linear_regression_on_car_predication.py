# -*- coding: utf-8 -*-
"""Multi Linear Regression on Car predication.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11gpLEVmzrhMe-BAO3vZZtU_sip0QakNE

#Multi-Linear regression

#Import Libraries
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""
# Load the dataset"""

data = pd.read_csv('car.csv')

"""# Preview the dataset

"""

print(data.head())

"""# Preprocess the data
# Handling categorical variables by converting them into dummy variables
"""

data = pd.get_dummies(data, drop_first=True)

"""# Define features (X) and target (y)

"""

X = data.drop('Price', axis=1)
y = data['Price']

"""# Split the dataset into training and testing sets

"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Initialize the Multiple Linear Regression model

"""

model = LinearRegression()

"""# Train the model

"""

model.fit(X_train, y_train)

"""# Make predictions on the test set

"""

y_pred = model.predict(X_test)

"""# Evaluate the model"""

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')
# Optional: Compare actual vs predicted prices
comparison = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison.head())

"""# Residual Plot

"""

import matplotlib.pyplot as plt
import seaborn as sns

residuals = y_test - y_pred
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_pred, y=residuals)
plt.axhline(0, color='red', linestyle='--')
plt.title('Residual Plot')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.show()

"""# Actual vs Predicted Prices"""

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
plt.title('Actual vs Predicted Prices')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.show()

"""
# Coefficient Plot (Feature Importance)"""

coefficients = pd.DataFrame(model.coef_, X.columns, columns=['Coefficient'])
coefficients = coefficients.sort_values(by='Coefficient', ascending=False)
plt.figure(figsize=(10, 6))
sns.barplot(x=coefficients.index, y=coefficients['Coefficient'])
plt.xticks(rotation=90)
plt.title('Feature Importance (Coefficient Plot)')
plt.show()

"""#EDA

# 1. Summary Statistics
"""

print("Summary Statistics:\n", data.describe())

"""# 2. Missing Values Analysis

"""

print("Missing Values:\n", data.isnull().sum())

"""# 1. Correlation Matrix (for numerical features)

"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv('car.csv')

plt.figure(figsize=(10, 8))
corr_matrix = data[['Year', 'Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'Seats']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix of Numerical Features')
plt.show()

"""# 2. Pair Plot (Numerical Features)

"""

sns.pairplot(data[['Year', 'Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'Seats']])
plt.show()

"""#Box plot"""

plt.figure(figsize=(10, 6))
sns.boxplot(data=data[['Year', 'Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'Seats']])
plt.xticks(rotation=90)
plt.title('Box Plot of Numerical Features')
plt.show()

"""# 4. Count Plots (for categorical features)

"""

plt.figure(figsize=(15, 5))

"""# Plot for Fuel_Type

"""

plt.subplot(1, 3, 1)
sns.countplot(x='Fuel_Type', data=data)
plt.title('Distribution of Fuel Type')

"""# Plot for Transmission"""

plt.subplot(1, 3, 2)
sns.countplot(x='Transmission', data=data)
plt.title('Distribution of Transmission Type')

"""# Plot for Owner_Type"""

plt.subplot(1, 3, 3)
sns.countplot(x='Owner_Type', data=data)
plt.title('Distribution of Owner Type')

plt.tight_layout()
plt.show()

"""#Explanation of Visualizations:
**Correlation Matrix**: Helps identify strong linear relationships between numerical features (e.g., Year, Kilometers_Driven, Mileage, etc.).  
**Pair Plot**: Provides scatter plots for all numerical features and histograms to visualize individual distributions. It helps identify relationships and correlations.  
**Box Plot**: Helps detect outliers in numerical features. If any feature has extreme values, they will be visible as points outside the boxes.  
**Count Plots**: These plots show the distribution of categorical features (e.g., Fuel_Type, Transmission, Owner_Type). This helps understand the proportion of different categories in the dataset.
"""
# -*- coding: utf-8 -*-
"""Decision Tree Regression on Car_Predication.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dxTI_qF8Qhwvuu9QOcsExXAVgVIdy9H8

#Decision Tree Regression

#Import Libraries
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

"""# Load the dataset

"""

data = pd.read_csv('car.csv')

"""# Preview the dataset (optional)

"""

print(data.head())

"""# Preprocess the data
# Handling categorical variables by converting them into dummy variables

"""

data = pd.get_dummies(data, drop_first=True)

"""# Define features (X) and target (y)

"""

X = data.drop('Price', axis=1)
y = data['Price']

"""# Split the dataset into training and testing sets

"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Initialize the Decision Tree Regression model


"""

model = DecisionTreeRegressor(random_state=42)

"""# Train the model"""

model.fit(X_train, y_train)

"""# Make predictions on the test set

"""

y_pred = model.predict(X_test)

"""# Evaluate the model"""

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

"""#Compare actual vs predicted prices

"""

comparison = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison.head())

"""#EDA

# 1. Summary Statistics
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('car.csv')

print("Summary Statistics:\n", data.describe())

"""
# 2. Missing Values Analysis
"""

print("Missing Values:\n", data.isnull().sum())

"""# 3. Distribution of the Target Variable (Price)

"""

plt.figure(figsize=(8, 6))
sns.histplot(data['Price'], kde=True, bins=30)
plt.title('Distribution of Car Prices')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

"""# 4. Correlation Matrix (only numerical features)

"""

plt.figure(figsize=(10, 8))
corr_matrix = data.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix of Features')
plt.show()

"""# 5. Pair Plot (Numerical Features)

"""

sns.pairplot(data[['Price', 'Year', 'Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'Seats']])
plt.show()

"""# 6. Box Plot for Outlier Detection

"""

plt.figure(figsize=(10, 6))
sns.boxplot(data=data[['Year', 'Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'Seats']])
plt.xticks(rotation=90)
plt.title('Box Plot of Numerical Features')
plt.show()

"""# 7. Count Plots for Categorical Features (Fuel_Type, Transmission, Owner_Type)

"""

plt.figure(figsize=(15, 5))

"""
# Plot for Fuel_Type,Transmission,Owner_type"""

# Plot for Fuel_Type
plt.subplot(1, 3, 1)
sns.countplot(x='Fuel_Type', data=data)
plt.title('Distribution of Fuel Type')

  # Plot for Transmission
plt.subplot(1, 3, 2)
sns.countplot(x='Transmission', data=data)
plt.title('Distribution of Transmission Type')

# Plot for Owner_Type
plt.subplot(1, 3, 3)
sns.countplot(x='Owner_Type', data=data)
plt.title('Distribution of Owner Type')

plt.tight_layout()
plt.show()

"""#Visiualization On Training and Testing Data"""

# 1. Distribution of the Target Variable (Price) in Training and Testing Sets
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
sns.histplot(X_train['Price'], kde=True, bins=30)
plt.title('Distribution of Prices in Training Set')
plt.xlabel('Price')
plt.ylabel('Frequency')

plt.subplot(1, 2, 2)
sns.histplot(X_test['Price'], kde=True, bins=30)
plt.title('Distribution of Prices in Testing Set')
plt.xlabel('Price')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()